# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:          # List of stages for jobs, and their order of execution
  - install
  - test
  - sonarscan
  - coveragedeploy
  - build
  - upload
  - uploadtopkg
  - deploytoserver

cache:
  paths:
    - node_modules/

npm-install:
  tags:
    - linux-runner1
  stage: install
  script:
    - npm install
    - ls
    - echo $CI_COMMIT_BRANCH
  artifacts:
    paths:
      - node_modules/*

npm-test:
  tags:
    - linux-runner1
  stage: test
  coverage: /^Statements\s*:\s*([^%]+)/
  script:
    - export CHROME_BIN=/usr/bin/google-chrome
    - ls
    - pwd
    - npm test
    - ls -lRta
  artifacts:
    when: always
    paths:
      - coverage/*
      - node_modules/*
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/ang-products/unit-test-result.xml
      junit: coverage/ang-products/unit-test-result.xml
    
variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
sonarcloud-check:
  tags:
    - linux-runner1
  stage: sonarscan
  image:
    name: sonarsource/sonar-scanner-cli:4.6
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - /opt/sonar-scanner/bin/sonar-scanner 


npm-build:
  tags:
    - linux-runner1
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
  script:
    - npm run build
    - ls
  artifacts:
    paths:
      - dist/*
      - node_modules/*

pages:
  tags:
    - linux-runner1
  stage: coveragedeploy
  dependencies:
    - npm-test
  script:
    - ls -l
    - mv coverage/ang-products/ public/
  artifacts:
    paths:
      - public
      - coverage/*
    expire_in: 10 days

packagepush:
  tags:
    - linux-runner1
  stage: upload
  rules:
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
  script:
    - cp -r ./dist/ang-products/ ./vivant-ui-final
    - cp -R ./node_modules ./vivant-ui-final
    - ls
    - /usr/bin/zip -r vivant-ui-final.zip ./vivant-ui-final/*
  artifacts:
    paths:
      - vivant-ui-final.zip

packagepushtoArtifactRepo:
  tags:
    - linux-runner1
  stage: uploadtopkg
  rules:
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
  script:
    - ls
    - VERSION=`jq -r .version ./package.json`
    - echo $VERSION
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./vivant-ui-final.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/vivant-ui/${VERSION}/vivant-ui-final.zip"'
  artifacts:
    paths:
      - vivant-ui-final.zip

deploytodev:
  tags:
    - linux-runner1
  stage: deploytoserver
  rules:
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
  before_script:
  - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )' 
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan 10.0.1.42 >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  environment:
    name: poc
  script:
    - ls 
    - scp -o StrictHostKeyChecking=no ./vivant-ui-final.zip ubuntu@10.0.1.42:/home/ubuntu
    - ssh -o StrictHostKeyChecking=no ubuntu@10.0.1.42 "hostname && ls -l /var/www/html && sudo unzip -o /home/ubuntu/vivant-ui-final.zip -d /var/www/html && ls -l /var/www/html && cd /var/www/html && sudo cp -rf vivant-ui-final/* . && ls -l /var/www/html && sudo rm -rf vivant-ui-final && exit"
  artifacts:
    paths:
      - vivant-ui-final.zip